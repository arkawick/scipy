name: ORT Analysis with AI Curation Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Add permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  ort-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Install Python dependencies
      run: |
        pip install python-inspector openai pyyaml
        python-inspector --version
        
    - name: Download ORT
      run: |
        ORT_VERSION="70.0.1"
        wget -q https://github.com/oss-review-toolkit/ort/releases/download/${ORT_VERSION}/ort-${ORT_VERSION}.tgz
        tar -xzf ort-${ORT_VERSION}.tgz
        echo "${GITHUB_WORKSPACE}/ort-${ORT_VERSION}/bin" >> $GITHUB_PATH
        
    - name: Verify ORT installation
      run: |
        ort --version
        java -version
        
    - name: Clean previous results
      run: |
        rm -rf ort-results
        mkdir -p ort-results
        
    - name: Run ORT Analyzer
      run: |
        ort analyze \
          -i . \
          -o ort-results/analyzer
          
    - name: Run ORT Advisor
      run: |
        ort advise \
          -i ort-results/analyzer/analyzer-result.yml \
          -o ort-results/advisor \
          --advisors OSV
      continue-on-error: true
      
    - name: Generate AI Curation Report
      env:
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        python ort_curation_script.py
      continue-on-error: true
      
    - name: Generate ORT Reports
      run: |
        # Determine the latest result file
        if [ -f ort-results/scanner/scan-result.yml ]; then
          INPUT_FILE="ort-results/scanner/scan-result.yml"
        elif [ -f ort-results/advisor/advise-result.yml ]; then
          INPUT_FILE="ort-results/advisor/advise-result.yml"
        else
          INPUT_FILE="ort-results/analyzer/analyzer-result.yml"
        fi
        
        ort report \
          -i "$INPUT_FILE" \
          -o ort-results/reporter \
          -f WebApp,StaticHtml,CycloneDx,SpdxDocument
    
    # Prepare artifacts for GitHub Pages
    - name: Prepare Pages Deployment
      run: |
        mkdir -p public
        
        # Copy WebApp report as index.html
        if [ -f ort-results/reporter/WebApp.html ]; then
          cp ort-results/reporter/WebApp.html public/index.html
        fi
        
        # Copy other reports
        cp -r ort-results/reporter/* public/ 2>/dev/null || true
        
        # Copy AI curation report if available
        if ls curation-report-*.md 1> /dev/null 2>&1; then
          cp curation-report-*.md public/ 2>/dev/null || true
        fi
        
        # Create a simple index page if needed
        if [ ! -f public/index.html ]; then
          echo "<html><body><h1>ORT Reports</h1><ul>" > public/index.html
          for file in public/*; do
            filename=$(basename "$file")
            echo "<li><a href='$filename'>$filename</a></li>" >> public/index.html
          done
          echo "</ul></body></html>" >> public/index.html
        fi
    
    # Upload to GitHub Pages (only on push to main branch)
    - name: Setup Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      
    - name: Upload Pages Artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'public'
        
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
          
    - name: Upload ORT Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ort-results-${{ github.ref_name }}-${{ github.run_number }}
        path: ort-results/
        retention-days: 30
        
    - name: Upload AI Curation Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ai-curation-report-${{ github.ref_name }}-${{ github.run_number }}
        path: curation-report-*.md
        retention-days: 30
        
    - name: Check for vulnerabilities
      id: vuln-check
      run: |
        if [ -f ort-results/advisor/advise-result.yml ]; then
          echo "## ORT Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count issues
          VULN_COUNT=$(grep -c "vulnerability" ort-results/advisor/advise-result.yml 2>/dev/null || echo "0")
          
          echo "- **Vulnerabilities found**: $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add AI report info if available
          if ls curation-report-*.md 1> /dev/null 2>&1; then
            echo "- **AI Curation Report**: ✅ Generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add Pages deployment info
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- **GitHub Pages**: 🚀 Deployed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Download the artifacts to view detailed reports." >> $GITHUB_STEP_SUMMARY
          
          # Output for use in PR comment
          echo "vuln_count=$VULN_COUNT" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
      
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔍 ORT Analysis Results\n\n';
          comment += '✅ Analysis completed successfully!\n\n';
          
          // Add direct link to view results
          comment += '### 📊 View Reports\n\n';
          comment += '**Quick Access:**\n';
          comment += '- 🌐 [View WebApp Report (GitHub Pages)](https://' + context.repo.owner + '.github.io/' + context.repo.repo + '/)\n';
          comment += '- 📥 [Download All Artifacts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')\n\n';
          
          comment += '📦 **Artifacts generated:**\n';
          comment += '- Full ORT results\n';
          comment += '- 🤖 AI-Generated Curation Report\n';
          comment += '- WebApp HTML report\n';
          comment += '- CycloneDX SBOM\n';
          comment += '- SPDX Document\n\n';
          
          // Try to read and include summary from AI report
          try {
            const reportFiles = fs.readdirSync('.').filter(f => f.startsWith('curation-report-'));
            if (reportFiles.length > 0) {
              const reportContent = fs.readFileSync(reportFiles[0], 'utf8');
              const summaryMatch = reportContent.match(/## Executive Summary\n\n([^\n]+)/);
              if (summaryMatch) {
                comment += '### 🤖 AI Curation Summary\n';
                comment += summaryMatch[1] + '\n\n';
              }
            }
          } catch (e) {
            // Continue without summary
          }
          
          comment += '---\n';
          comment += '*💡 Tip: Once merged to main, the WebApp report will be deployed to GitHub Pages!*\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      continue-on-error: true
